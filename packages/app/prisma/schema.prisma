// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database/main.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @unique
  access_token      String? @unique
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @unique
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String?                @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  publicKey        String?                @unique // 一度セットすると変更不可とする
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  requestingQuest  QuestField[]
  workingQuest     QuestWorkerField[]
  pushSubscription PushSubscriptionField?
  ChatMemberField  ChatMemberField[]
  ChatMessageField ChatMessageField[]
  ChatRoomUnread   ChatRoomUnread[]
}

model QuestField {
  id                     String                @id @default(cuid())
  ownerId                String? // 退会の際には nullable
  title                  String
  description            String
  ownerPublicKey         String
  status                 String                @default("WANTED") // ENUM = WANTED, WORKING, COMPLETED, CANCELLED
  deadline               DateTime
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  rewardFieldId          String?               @unique
  questTransactionInfoId String?               @unique
  reward                 RewardField?          @relation(fields: [rewardFieldId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  workers                QuestWorkerField[]
  owner                  User?                 @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  questTransactionInfo   QuestTransactionInfo? @relation(fields: [questTransactionInfoId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

model QuestTransactionInfo {
  id              String      @id @default(cuid())
  status          String      @default("UNCONFIRMED") // CONFIRMED/UNCONFIRMED
  questId         String
  transactionHash String? // aggregate complete transaction hash 
  secret          String
  proof           String
  deadline        DateTime
  quest           QuestField?
}

model RewardField {
  id         String      @id @default(cuid())
  chain      String      @default("XYM")
  currencyId String
  amount     Int
  quest      QuestField?
}

model QuestWorkerField {
  id        String     @id @default(cuid())
  userId    String?
  questId   String
  status    String     @default("APPLYING") // ENUM = APPLYING, ACCEPTED, COMPLETED, REJECTED
  worker    User?      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  quest     QuestField @relation(fields: [questId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime   @default(now())
}

// チャットルーム。ギルド等多人数向けは別途用意
model ChatRoomField {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastPostedUserId String // 最後の送信者が自分か否か判断する、かつ updatedAt をトリガーする為
  members          ChatMemberField[]
  messages         ChatMessageField[]
  unreads          ChatRoomUnread[]
}

model ChatRoomUnread {
  id         String        @id @default(cuid())
  updatedAt  DateTime      @updatedAt
  chatRoomId String
  isUnread   Boolean       @default(true)
  userId     String
  user       User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatRoom   ChatRoomField @relation(fields: [chatRoomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ChatMemberField {
  id         String        @id @default(cuid())
  userId     String?
  chatRoomId String
  chatRoom   ChatRoomField @relation(fields: [chatRoomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user       User?         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

model ChatMessageField {
  id         String        @id @default(cuid())
  chatRoomId String
  body       String
  userId     String?
  createdAt  DateTime      @default(now())
  chatRoom   ChatRoomField @relation(fields: [chatRoomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user       User?         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

model PushSubscriptionField {
  id             String @id @default(cuid())
  userId         String @unique
  endpoint       String
  expirationTime Int?
  p256dh         String
  auth           String
  user           User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
