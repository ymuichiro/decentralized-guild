/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatRoomMember } from './ChatRoomMember';
import {
    ChatRoomMemberFromJSON,
    ChatRoomMemberFromJSONTyped,
    ChatRoomMemberToJSON,
} from './ChatRoomMember';
import type { ChatRoomMessage } from './ChatRoomMessage';
import {
    ChatRoomMessageFromJSON,
    ChatRoomMessageFromJSONTyped,
    ChatRoomMessageToJSON,
} from './ChatRoomMessage';

/**
 * 
 * @export
 * @interface ChatRoom
 */
export interface ChatRoom {
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatRoom
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    lastPostedUserId: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatRoom
     */
    updatedAt: Date;
    /**
     * 
     * @type {Array<ChatRoomMessage>}
     * @memberof ChatRoom
     */
    messages: Array<ChatRoomMessage>;
    /**
     * 
     * @type {Array<ChatRoomMember>}
     * @memberof ChatRoom
     */
    members: Array<ChatRoomMember>;
}

/**
 * Check if a given object implements the ChatRoom interface.
 */
export function instanceOfChatRoom(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "lastPostedUserId" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "messages" in value;
    isInstance = isInstance && "members" in value;

    return isInstance;
}

export function ChatRoomFromJSON(json: any): ChatRoom {
    return ChatRoomFromJSONTyped(json, false);
}

export function ChatRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatRoom {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'lastPostedUserId': json['lastPostedUserId'],
        'updatedAt': (new Date(json['updatedAt'])),
        'messages': ((json['messages'] as Array<any>).map(ChatRoomMessageFromJSON)),
        'members': ((json['members'] as Array<any>).map(ChatRoomMemberFromJSON)),
    };
}

export function ChatRoomToJSON(value?: ChatRoom | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'lastPostedUserId': value.lastPostedUserId,
        'updatedAt': (value.updatedAt.toISOString()),
        'messages': ((value.messages as Array<any>).map(ChatRoomMessageToJSON)),
        'members': ((value.members as Array<any>).map(ChatRoomMemberToJSON)),
    };
}

