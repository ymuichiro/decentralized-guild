/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Reward } from './Reward';
import {
    RewardFromJSON,
    RewardFromJSONTyped,
    RewardToJSON,
} from './Reward';

/**
 * Differential information when creating or updating Quest
 * @export
 * @interface QuestUpdateRequest
 */
export interface QuestUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateRequest
     */
    description: string;
    /**
     * Delivery completion date（= Invalid Date of Secret Lock Transaction）
     * @type {Date}
     * @memberof QuestUpdateRequest
     */
    deadline: Date;
    /**
     * 
     * @type {Reward}
     * @memberof QuestUpdateRequest
     */
    reward: Reward;
}

/**
 * Check if a given object implements the QuestUpdateRequest interface.
 */
export function instanceOfQuestUpdateRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "deadline" in value;
    isInstance = isInstance && "reward" in value;

    return isInstance;
}

export function QuestUpdateRequestFromJSON(json: any): QuestUpdateRequest {
    return QuestUpdateRequestFromJSONTyped(json, false);
}

export function QuestUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestUpdateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'],
        'deadline': (new Date(json['deadline'])),
        'reward': RewardFromJSON(json['reward']),
    };
}

export function QuestUpdateRequestToJSON(value?: QuestUpdateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'deadline': (value.deadline.toISOString()),
        'reward': RewardToJSON(value.reward),
    };
}

