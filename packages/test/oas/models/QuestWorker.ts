/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestWorkerStatusEnum } from './QuestWorkerStatusEnum';
import {
    QuestWorkerStatusEnumFromJSON,
    QuestWorkerStatusEnumFromJSONTyped,
    QuestWorkerStatusEnumToJSON,
} from './QuestWorkerStatusEnum';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface QuestWorker
 */
export interface QuestWorker {
    /**
     * 
     * @type {string}
     * @memberof QuestWorker
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof QuestWorker
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestWorker
     */
    questId: string;
    /**
     * 
     * @type {QuestWorkerStatusEnum}
     * @memberof QuestWorker
     */
    status: QuestWorkerStatusEnum;
    /**
     * 
     * @type {User}
     * @memberof QuestWorker
     */
    worker?: User;
    /**
     * 
     * @type {Date}
     * @memberof QuestWorker
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the QuestWorker interface.
 */
export function instanceOfQuestWorker(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "questId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function QuestWorkerFromJSON(json: any): QuestWorker {
    return QuestWorkerFromJSONTyped(json, false);
}

export function QuestWorkerFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestWorker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'questId': json['questId'],
        'status': QuestWorkerStatusEnumFromJSON(json['status']),
        'worker': !exists(json, 'worker') ? undefined : UserFromJSON(json['worker']),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function QuestWorkerToJSON(value?: QuestWorker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'questId': value.questId,
        'status': QuestWorkerStatusEnumToJSON(value.status),
        'worker': UserToJSON(value.worker),
        'createdAt': (value.createdAt.toISOString()),
    };
}

