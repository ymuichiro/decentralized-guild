/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatRoom,
  GetChatRoomsResponseInner,
  PostChatRoomRequestInner,
  PostChatRoomToMessageBody,
} from '../models';
import {
    ChatRoomFromJSON,
    ChatRoomToJSON,
    GetChatRoomsResponseInnerFromJSON,
    GetChatRoomsResponseInnerToJSON,
    PostChatRoomRequestInnerFromJSON,
    PostChatRoomRequestInnerToJSON,
    PostChatRoomToMessageBodyFromJSON,
    PostChatRoomToMessageBodyToJSON,
} from '../models';

export interface GetChatInfoRequest {
    chatRoomId: string;
}

export interface GetChatsRequest {
    offset?: number;
}

export interface PostChatRequest {
    postChatRoomRequestInner: PostChatRoomRequestInner;
}

export interface PostChatRoomToMessageRequest {
    chatRoomId: string;
    postChatRoomToMessageBody: PostChatRoomToMessageBody;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * get chat room info
     * get chat room info
     */
    async getChatInfoRaw(requestParameters: GetChatInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatRoom>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling getChatInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chats/{chatRoomId}`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatRoomFromJSON(jsonValue));
    }

    /**
     * get chat room info
     * get chat room info
     */
    async getChatInfo(requestParameters: GetChatInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatRoom> {
        const response = await this.getChatInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 自身がアクセス可能なチャットルームの一覧を取得
     * get chat rooms
     */
    async getChatsRaw(requestParameters: GetChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChatRoomsResponseInner>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChatRoomsResponseInnerFromJSON(jsonValue));
    }

    /**
     * 自身がアクセス可能なチャットルームの一覧を取得
     * get chat rooms
     */
    async getChats(requestParameters: GetChatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChatRoomsResponseInner> {
        const response = await this.getChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * post chat room
     * post chat room
     */
    async postChatRaw(requestParameters: PostChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatRoom>> {
        if (requestParameters.postChatRoomRequestInner === null || requestParameters.postChatRoomRequestInner === undefined) {
            throw new runtime.RequiredError('postChatRoomRequestInner','Required parameter requestParameters.postChatRoomRequestInner was null or undefined when calling postChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostChatRoomRequestInnerToJSON(requestParameters.postChatRoomRequestInner),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatRoomFromJSON(jsonValue));
    }

    /**
     * post chat room
     * post chat room
     */
    async postChat(requestParameters: PostChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatRoom> {
        const response = await this.postChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * post chat room to message
     * post chat room to message
     */
    async postChatRoomToMessageRaw(requestParameters: PostChatRoomToMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chatRoomId === null || requestParameters.chatRoomId === undefined) {
            throw new runtime.RequiredError('chatRoomId','Required parameter requestParameters.chatRoomId was null or undefined when calling postChatRoomToMessage.');
        }

        if (requestParameters.postChatRoomToMessageBody === null || requestParameters.postChatRoomToMessageBody === undefined) {
            throw new runtime.RequiredError('postChatRoomToMessageBody','Required parameter requestParameters.postChatRoomToMessageBody was null or undefined when calling postChatRoomToMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chats/{chatRoomId}/post`.replace(`{${"chatRoomId"}}`, encodeURIComponent(String(requestParameters.chatRoomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostChatRoomToMessageBodyToJSON(requestParameters.postChatRoomToMessageBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * post chat room to message
     * post chat room to message
     */
    async postChatRoomToMessage(requestParameters: PostChatRoomToMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postChatRoomToMessageRaw(requestParameters, initOverrides);
    }

}
