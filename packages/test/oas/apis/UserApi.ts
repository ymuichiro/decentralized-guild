/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetUsersResponseInner,
  PostUserVerifyRequestBody,
  PutUserRequestBody,
  User,
  WebPush,
} from '../models';
import {
    GetUsersResponseInnerFromJSON,
    GetUsersResponseInnerToJSON,
    PostUserVerifyRequestBodyFromJSON,
    PostUserVerifyRequestBodyToJSON,
    PutUserRequestBodyFromJSON,
    PutUserRequestBodyToJSON,
    UserFromJSON,
    UserToJSON,
    WebPushFromJSON,
    WebPushToJSON,
} from '../models';

export interface DeleteUserRequest {
    userId: string;
}

export interface GetUserRequest {
    userId: string;
}

export interface GetUsersRequest {
    offset?: number;
}

export interface PostUserProfileImageRequest {
    userId: string;
    file: Blob;
}

export interface PostUserPublicKeyRequest {
    userId: string;
    postUserVerifyRequestBody: PostUserVerifyRequestBody;
}

export interface PostUserPushRequest {
    userId: string;
    webPush: WebPush;
}

export interface PutUserRequest {
    userId: string;
    putUserRequestBody: PutUserRequestBody;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * ユーザーの退会処理。パブリックキー情報はサーバー上に残置される。
     * delete current user
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの退会処理。パブリックキー情報はサーバー上に残置される。
     * delete current user
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザー情報を取得する。SessionID と同一の場合のみ email 情報を返す。
     * get user info
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ユーザー情報を取得する。SessionID と同一の場合のみ email 情報を返す。
     * get user info
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーの一覧を取得する
     * get users
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersResponseInner>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersResponseInnerFromJSON(jsonValue));
    }

    /**
     * ユーザーの一覧を取得する
     * get users
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersResponseInner> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーのプロフィールイメージを更新する
     * post user profile image
     */
    async postUserProfileImageRaw(requestParameters: PostUserProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUserProfileImage.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling postUserProfileImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/users/{userId}/profile`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーのプロフィールイメージを更新する
     * post user profile image
     */
    async postUserProfileImage(requestParameters: PostUserProfileImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserProfileImageRaw(requestParameters, initOverrides);
    }

    /**
     * update user publickey after verified
     * post user public key & verify
     */
    async postUserPublicKeyRaw(requestParameters: PostUserPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUserPublicKey.');
        }

        if (requestParameters.postUserVerifyRequestBody === null || requestParameters.postUserVerifyRequestBody === undefined) {
            throw new runtime.RequiredError('postUserVerifyRequestBody','Required parameter requestParameters.postUserVerifyRequestBody was null or undefined when calling postUserPublicKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{userId}/verify`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserVerifyRequestBodyToJSON(requestParameters.postUserVerifyRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update user publickey after verified
     * post user public key & verify
     */
    async postUserPublicKey(requestParameters: PostUserPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserPublicKeyRaw(requestParameters, initOverrides);
    }

    /**
     * regist web push
     * regist web push
     */
    async postUserPushRaw(requestParameters: PostUserPushRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUserPush.');
        }

        if (requestParameters.webPush === null || requestParameters.webPush === undefined) {
            throw new runtime.RequiredError('webPush','Required parameter requestParameters.webPush was null or undefined when calling postUserPush.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{userId}/push`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebPushToJSON(requestParameters.webPush),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * regist web push
     * regist web push
     */
    async postUserPush(requestParameters: PostUserPushRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUserPushRaw(requestParameters, initOverrides);
    }

    /**
     * ユーザーの情報を更新する。パブリックキー、プロフィールの更新は別APIにて定義する
     * put user info
     */
    async putUserRaw(requestParameters: PutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling putUser.');
        }

        if (requestParameters.putUserRequestBody === null || requestParameters.putUserRequestBody === undefined) {
            throw new runtime.RequiredError('putUserRequestBody','Required parameter requestParameters.putUserRequestBody was null or undefined when calling putUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutUserRequestBodyToJSON(requestParameters.putUserRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザーの情報を更新する。パブリックキー、プロフィールの更新は別APIにて定義する
     * put user info
     */
    async putUser(requestParameters: PutUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUserRaw(requestParameters, initOverrides);
    }

}
