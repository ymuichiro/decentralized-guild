/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatRoom,
  GetQuestWorkersResponse,
  GetQuestsResponseInner,
  PostQuestApprovalResponse,
  PutQuestApprovalRequest,
  Quest,
  QuestUpdateRequest,
  QuestWorker,
} from '../models';
import {
    ChatRoomFromJSON,
    ChatRoomToJSON,
    GetQuestWorkersResponseFromJSON,
    GetQuestWorkersResponseToJSON,
    GetQuestsResponseInnerFromJSON,
    GetQuestsResponseInnerToJSON,
    PostQuestApprovalResponseFromJSON,
    PostQuestApprovalResponseToJSON,
    PutQuestApprovalRequestFromJSON,
    PutQuestApprovalRequestToJSON,
    QuestFromJSON,
    QuestToJSON,
    QuestUpdateRequestFromJSON,
    QuestUpdateRequestToJSON,
    QuestWorkerFromJSON,
    QuestWorkerToJSON,
} from '../models';

export interface DeleteQuestRequest {
    questId: string;
}

export interface GetQuestRequest {
    questId: string;
}

export interface GetQuestWorkerRequest {
    questId: string;
    workerId: string;
}

export interface GetQuestWorkersRequest {
    questId: string;
}

export interface GetQuestsRequest {
    requesterPublicKey?: string;
    workerPublicKey?: string;
    offset?: number;
    keyword?: string;
}

export interface PostQuestRequest {
    questUpdateRequest: QuestUpdateRequest;
}

export interface PostQuestApprovalRequest {
    questId: string;
    workerId: string;
}

export interface PostQuestWorkerRequest {
    questId: string;
}

export interface PostQuestWorkerCompletionRequest {
    questId: string;
    workerId: string;
}

export interface PostQuestWorkerRewardRequest {
    questId: string;
    workerId: string;
}

export interface PutQuestRequest {
    questId: string;
    questUpdateRequest: QuestUpdateRequest;
}

export interface PutQuestApprovalOperationRequest {
    questId: string;
    workerId: string;
    putQuestApprovalRequest: PutQuestApprovalRequest;
}

export interface PutQuestWorkerRequest {
    questId: string;
    workerId: string;
}

/**
 * 
 */
export class QuestApi extends runtime.BaseAPI {

    /**
     * 成立済みの場合、削除の受付は行わない
     * delete quest
     */
    async deleteQuestRaw(requestParameters: DeleteQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling deleteQuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 成立済みの場合、削除の受付は行わない
     * delete quest
     */
    async deleteQuest(requestParameters: DeleteQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuestRaw(requestParameters, initOverrides);
    }

    /**
     * Obtaining quest information
     * get quest
     */
    async getQuestRaw(requestParameters: GetQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quest>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling getQuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestFromJSON(jsonValue));
    }

    /**
     * Obtaining quest information
     * get quest
     */
    async getQuest(requestParameters: GetQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quest> {
        const response = await this.getQuestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * クエストに紐づくワーカーの情報を取得する
     * get quest worker
     */
    async getQuestWorkerRaw(requestParameters: GetQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestWorker>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling getQuestWorker.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling getQuestWorker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestWorkerFromJSON(jsonValue));
    }

    /**
     * クエストに紐づくワーカーの情報を取得する
     * get quest worker
     */
    async getQuestWorker(requestParameters: GetQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestWorker> {
        const response = await this.getQuestWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * クエストに紐づくワーカーの一覧を取得する
     * get quest workers
     */
    async getQuestWorkersRaw(requestParameters: GetQuestWorkersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuestWorkersResponse>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling getQuestWorkers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuestWorkersResponseFromJSON(jsonValue));
    }

    /**
     * クエストに紐づくワーカーの一覧を取得する
     * get quest workers
     */
    async getQuestWorkers(requestParameters: GetQuestWorkersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuestWorkersResponse> {
        const response = await this.getQuestWorkersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieving the Quest List
     * get quests
     */
    async getQuestsRaw(requestParameters: GetQuestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuestsResponseInner>> {
        const queryParameters: any = {};

        if (requestParameters.requesterPublicKey !== undefined) {
            queryParameters['requesterPublicKey'] = requestParameters.requesterPublicKey;
        }

        if (requestParameters.workerPublicKey !== undefined) {
            queryParameters['workerPublicKey'] = requestParameters.workerPublicKey;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuestsResponseInnerFromJSON(jsonValue));
    }

    /**
     * Retrieving the Quest List
     * get quests
     */
    async getQuests(requestParameters: GetQuestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuestsResponseInner> {
        const response = await this.getQuestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register quest
     * post quest
     */
    async postQuestRaw(requestParameters: PostQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quest>> {
        if (requestParameters.questUpdateRequest === null || requestParameters.questUpdateRequest === undefined) {
            throw new runtime.RequiredError('questUpdateRequest','Required parameter requestParameters.questUpdateRequest was null or undefined when calling postQuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestUpdateRequestToJSON(requestParameters.questUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestFromJSON(jsonValue));
    }

    /**
     * Register quest
     * post quest
     */
    async postQuest(requestParameters: PostQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quest> {
        const response = await this.postQuestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * クエスト作成者による提案の承認
     * approval quest proposal
     */
    async postQuestApprovalRaw(requestParameters: PostQuestApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostQuestApprovalResponse>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling postQuestApproval.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling postQuestApproval.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}/approval`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostQuestApprovalResponseFromJSON(jsonValue));
    }

    /**
     * クエスト作成者による提案の承認
     * approval quest proposal
     */
    async postQuestApproval(requestParameters: PostQuestApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostQuestApprovalResponse> {
        const response = await this.postQuestApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * クエストにワーカーを追加する
     * post quest worker
     */
    async postQuestWorkerRaw(requestParameters: PostQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatRoom>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling postQuestWorker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatRoomFromJSON(jsonValue));
    }

    /**
     * クエストにワーカーを追加する
     * post quest worker
     */
    async postQuestWorker(requestParameters: PostQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatRoom> {
        const response = await this.postQuestWorkerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タスク完了時の検収リクエスト
     * post quest worker completion
     */
    async postQuestWorkerCompletionRaw(requestParameters: PostQuestWorkerCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling postQuestWorkerCompletion.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling postQuestWorkerCompletion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}/completion`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * タスク完了時の検収リクエスト
     * post quest worker completion
     */
    async postQuestWorkerCompletion(requestParameters: PostQuestWorkerCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postQuestWorkerCompletionRaw(requestParameters, initOverrides);
    }

    /**
     * タスクの完了時に報酬を支払う
     * post quest worker reward
     */
    async postQuestWorkerRewardRaw(requestParameters: PostQuestWorkerRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling postQuestWorkerReward.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling postQuestWorkerReward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}/reward`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * タスクの完了時に報酬を支払う
     * post quest worker reward
     */
    async postQuestWorkerReward(requestParameters: PostQuestWorkerRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postQuestWorkerRewardRaw(requestParameters, initOverrides);
    }

    /**
     * update quest information
     * put quest
     */
    async putQuestRaw(requestParameters: PutQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling putQuest.');
        }

        if (requestParameters.questUpdateRequest === null || requestParameters.questUpdateRequest === undefined) {
            throw new runtime.RequiredError('questUpdateRequest','Required parameter requestParameters.questUpdateRequest was null or undefined when calling putQuest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quests/{questId}`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestUpdateRequestToJSON(requestParameters.questUpdateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update quest information
     * put quest
     */
    async putQuest(requestParameters: PutQuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putQuestRaw(requestParameters, initOverrides);
    }

    /**
     * 提案の承認時に生成されたトランザクションを署名、アナウンスしたことを伝えるAPI
     * set transaction status
     */
    async putQuestApprovalRaw(requestParameters: PutQuestApprovalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling putQuestApproval.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling putQuestApproval.');
        }

        if (requestParameters.putQuestApprovalRequest === null || requestParameters.putQuestApprovalRequest === undefined) {
            throw new runtime.RequiredError('putQuestApprovalRequest','Required parameter requestParameters.putQuestApprovalRequest was null or undefined when calling putQuestApproval.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}/approval`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutQuestApprovalRequestToJSON(requestParameters.putQuestApprovalRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 提案の承認時に生成されたトランザクションを署名、アナウンスしたことを伝えるAPI
     * set transaction status
     */
    async putQuestApproval(requestParameters: PutQuestApprovalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putQuestApprovalRaw(requestParameters, initOverrides);
    }

    /**
     * ワーカーによるキャンセル（ステータスが申し込み中の時のみ実行可能）
     * put quest worker
     */
    async putQuestWorkerRaw(requestParameters: PutQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.questId === null || requestParameters.questId === undefined) {
            throw new runtime.RequiredError('questId','Required parameter requestParameters.questId was null or undefined when calling putQuestWorker.');
        }

        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
            throw new runtime.RequiredError('workerId','Required parameter requestParameters.workerId was null or undefined when calling putQuestWorker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quests/{questId}/workers/{workerId}`.replace(`{${"questId"}}`, encodeURIComponent(String(requestParameters.questId))).replace(`{${"workerId"}}`, encodeURIComponent(String(requestParameters.workerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ワーカーによるキャンセル（ステータスが申し込み中の時のみ実行可能）
     * put quest worker
     */
    async putQuestWorker(requestParameters: PutQuestWorkerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putQuestWorkerRaw(requestParameters, initOverrides);
    }

}
