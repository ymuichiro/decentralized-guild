/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MosaicRestrictionTypeEnum } from './MosaicRestrictionTypeEnum';
import {
    MosaicRestrictionTypeEnumFromJSON,
    MosaicRestrictionTypeEnumFromJSONTyped,
    MosaicRestrictionTypeEnumToJSON,
} from './MosaicRestrictionTypeEnum';
import type { NetworkTypeEnum } from './NetworkTypeEnum';
import {
    NetworkTypeEnumFromJSON,
    NetworkTypeEnumFromJSONTyped,
    NetworkTypeEnumToJSON,
} from './NetworkTypeEnum';

/**
 * 
 * @export
 * @interface EmbeddedMosaicGlobalRestrictionTransactionDTO
 */
export interface EmbeddedMosaicGlobalRestrictionTransactionDTO {
    /**
     * Public key.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    signerPublicKey: string;
    /**
     * Entity version.
     * @type {number}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    version: number;
    /**
     * 
     * @type {NetworkTypeEnum}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    network: NetworkTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    type: number;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    mosaicId: string;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    referenceMosaicId: string;
    /**
     * Restriction key.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    restrictionKey: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    previousRestrictionValue: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    newRestrictionValue: string;
    /**
     * 
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    previousRestrictionType: MosaicRestrictionTypeEnum;
    /**
     * 
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedMosaicGlobalRestrictionTransactionDTO
     */
    newRestrictionType: MosaicRestrictionTypeEnum;
}

/**
 * Check if a given object implements the EmbeddedMosaicGlobalRestrictionTransactionDTO interface.
 */
export function instanceOfEmbeddedMosaicGlobalRestrictionTransactionDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "signerPublicKey" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "network" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "mosaicId" in value;
    isInstance = isInstance && "referenceMosaicId" in value;
    isInstance = isInstance && "restrictionKey" in value;
    isInstance = isInstance && "previousRestrictionValue" in value;
    isInstance = isInstance && "newRestrictionValue" in value;
    isInstance = isInstance && "previousRestrictionType" in value;
    isInstance = isInstance && "newRestrictionType" in value;

    return isInstance;
}

export function EmbeddedMosaicGlobalRestrictionTransactionDTOFromJSON(json: any): EmbeddedMosaicGlobalRestrictionTransactionDTO {
    return EmbeddedMosaicGlobalRestrictionTransactionDTOFromJSONTyped(json, false);
}

export function EmbeddedMosaicGlobalRestrictionTransactionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddedMosaicGlobalRestrictionTransactionDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'signerPublicKey': json['signerPublicKey'],
        'version': json['version'],
        'network': NetworkTypeEnumFromJSON(json['network']),
        'type': json['type'],
        'mosaicId': json['mosaicId'],
        'referenceMosaicId': json['referenceMosaicId'],
        'restrictionKey': json['restrictionKey'],
        'previousRestrictionValue': json['previousRestrictionValue'],
        'newRestrictionValue': json['newRestrictionValue'],
        'previousRestrictionType': MosaicRestrictionTypeEnumFromJSON(json['previousRestrictionType']),
        'newRestrictionType': MosaicRestrictionTypeEnumFromJSON(json['newRestrictionType']),
    };
}

export function EmbeddedMosaicGlobalRestrictionTransactionDTOToJSON(value?: EmbeddedMosaicGlobalRestrictionTransactionDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'signerPublicKey': value.signerPublicKey,
        'version': value.version,
        'network': NetworkTypeEnumToJSON(value.network),
        'type': value.type,
        'mosaicId': value.mosaicId,
        'referenceMosaicId': value.referenceMosaicId,
        'restrictionKey': value.restrictionKey,
        'previousRestrictionValue': value.previousRestrictionValue,
        'newRestrictionValue': value.newRestrictionValue,
        'previousRestrictionType': MosaicRestrictionTypeEnumToJSON(value.previousRestrictionType),
        'newRestrictionType': MosaicRestrictionTypeEnumToJSON(value.newRestrictionType),
    };
}

