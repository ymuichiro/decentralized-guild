/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MosaicAddressRestrictionEntryDTO } from './MosaicAddressRestrictionEntryDTO';
import {
    MosaicAddressRestrictionEntryDTOFromJSON,
    MosaicAddressRestrictionEntryDTOFromJSONTyped,
    MosaicAddressRestrictionEntryDTOToJSON,
} from './MosaicAddressRestrictionEntryDTO';
import type { MosaicRestrictionEntryTypeEnum } from './MosaicRestrictionEntryTypeEnum';
import {
    MosaicRestrictionEntryTypeEnumFromJSON,
    MosaicRestrictionEntryTypeEnumFromJSONTyped,
    MosaicRestrictionEntryTypeEnumToJSON,
} from './MosaicRestrictionEntryTypeEnum';

/**
 * 
 * @export
 * @interface MosaicAddressRestrictionEntryWrapperDTO
 */
export interface MosaicAddressRestrictionEntryWrapperDTO {
    /**
     * The version of the state
     * @type {number}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    version: number;
    /**
     * 
     * @type {string}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    compositeHash: string;
    /**
     * 
     * @type {MosaicRestrictionEntryTypeEnum}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    entryType: MosaicRestrictionEntryTypeEnum;
    /**
     * Mosaic identifier.
     * @type {string}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    mosaicId: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    targetAddress: string;
    /**
     * 
     * @type {Array<MosaicAddressRestrictionEntryDTO>}
     * @memberof MosaicAddressRestrictionEntryWrapperDTO
     */
    restrictions: Array<MosaicAddressRestrictionEntryDTO>;
}

/**
 * Check if a given object implements the MosaicAddressRestrictionEntryWrapperDTO interface.
 */
export function instanceOfMosaicAddressRestrictionEntryWrapperDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "compositeHash" in value;
    isInstance = isInstance && "entryType" in value;
    isInstance = isInstance && "mosaicId" in value;
    isInstance = isInstance && "targetAddress" in value;
    isInstance = isInstance && "restrictions" in value;

    return isInstance;
}

export function MosaicAddressRestrictionEntryWrapperDTOFromJSON(json: any): MosaicAddressRestrictionEntryWrapperDTO {
    return MosaicAddressRestrictionEntryWrapperDTOFromJSONTyped(json, false);
}

export function MosaicAddressRestrictionEntryWrapperDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MosaicAddressRestrictionEntryWrapperDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'compositeHash': json['compositeHash'],
        'entryType': MosaicRestrictionEntryTypeEnumFromJSON(json['entryType']),
        'mosaicId': json['mosaicId'],
        'targetAddress': json['targetAddress'],
        'restrictions': ((json['restrictions'] as Array<any>).map(MosaicAddressRestrictionEntryDTOFromJSON)),
    };
}

export function MosaicAddressRestrictionEntryWrapperDTOToJSON(value?: MosaicAddressRestrictionEntryWrapperDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'compositeHash': value.compositeHash,
        'entryType': MosaicRestrictionEntryTypeEnumToJSON(value.entryType),
        'mosaicId': value.mosaicId,
        'targetAddress': value.targetAddress,
        'restrictions': ((value.restrictions as Array<any>).map(MosaicAddressRestrictionEntryDTOToJSON)),
    };
}

