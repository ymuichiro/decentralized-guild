/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatementMetaDTO } from './StatementMetaDTO';
import {
    StatementMetaDTOFromJSON,
    StatementMetaDTOFromJSONTyped,
    StatementMetaDTOToJSON,
} from './StatementMetaDTO';
import type { TransactionStatementDTO } from './TransactionStatementDTO';
import {
    TransactionStatementDTOFromJSON,
    TransactionStatementDTOFromJSONTyped,
    TransactionStatementDTOToJSON,
} from './TransactionStatementDTO';

/**
 * Collection of receipts related to a transaction.
 * @export
 * @interface TransactionStatementInfoDTO
 */
export interface TransactionStatementInfoDTO {
    /**
     * Internal resource identifier.
     * @type {string}
     * @memberof TransactionStatementInfoDTO
     */
    id: string;
    /**
     * 
     * @type {StatementMetaDTO}
     * @memberof TransactionStatementInfoDTO
     */
    meta: StatementMetaDTO;
    /**
     * 
     * @type {TransactionStatementDTO}
     * @memberof TransactionStatementInfoDTO
     */
    statement: TransactionStatementDTO;
}

/**
 * Check if a given object implements the TransactionStatementInfoDTO interface.
 */
export function instanceOfTransactionStatementInfoDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "meta" in value;
    isInstance = isInstance && "statement" in value;

    return isInstance;
}

export function TransactionStatementInfoDTOFromJSON(json: any): TransactionStatementInfoDTO {
    return TransactionStatementInfoDTOFromJSONTyped(json, false);
}

export function TransactionStatementInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionStatementInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'meta': StatementMetaDTOFromJSON(json['meta']),
        'statement': TransactionStatementDTOFromJSON(json['statement']),
    };
}

export function TransactionStatementInfoDTOToJSON(value?: TransactionStatementInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'meta': StatementMetaDTOToJSON(value.meta),
        'statement': TransactionStatementDTOToJSON(value.statement),
    };
}

