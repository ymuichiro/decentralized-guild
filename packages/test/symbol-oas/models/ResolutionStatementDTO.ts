/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResolutionEntryDTO } from './ResolutionEntryDTO';
import {
    ResolutionEntryDTOFromJSON,
    ResolutionEntryDTOFromJSONTyped,
    ResolutionEntryDTOToJSON,
} from './ResolutionEntryDTO';
import type { ResolutionStatementDTOUnresolved } from './ResolutionStatementDTOUnresolved';
import {
    ResolutionStatementDTOUnresolvedFromJSON,
    ResolutionStatementDTOUnresolvedFromJSONTyped,
    ResolutionStatementDTOUnresolvedToJSON,
} from './ResolutionStatementDTOUnresolved';

/**
 * 
 * @export
 * @interface ResolutionStatementDTO
 */
export interface ResolutionStatementDTO {
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof ResolutionStatementDTO
     */
    height: string;
    /**
     * 
     * @type {ResolutionStatementDTOUnresolved}
     * @memberof ResolutionStatementDTO
     */
    unresolved: ResolutionStatementDTOUnresolved;
    /**
     * Array of resolution entries linked to the unresolved namespaceId.
     * It is an array instead of a single resolution entry since
     * within one block the resolution might change for different sources due to alias related transactions.
     * @type {Array<ResolutionEntryDTO>}
     * @memberof ResolutionStatementDTO
     */
    resolutionEntries: Array<ResolutionEntryDTO>;
}

/**
 * Check if a given object implements the ResolutionStatementDTO interface.
 */
export function instanceOfResolutionStatementDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "unresolved" in value;
    isInstance = isInstance && "resolutionEntries" in value;

    return isInstance;
}

export function ResolutionStatementDTOFromJSON(json: any): ResolutionStatementDTO {
    return ResolutionStatementDTOFromJSONTyped(json, false);
}

export function ResolutionStatementDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionStatementDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'height': json['height'],
        'unresolved': ResolutionStatementDTOUnresolvedFromJSON(json['unresolved']),
        'resolutionEntries': ((json['resolutionEntries'] as Array<any>).map(ResolutionEntryDTOFromJSON)),
    };
}

export function ResolutionStatementDTOToJSON(value?: ResolutionStatementDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'height': value.height,
        'unresolved': ResolutionStatementDTOUnresolvedToJSON(value.unresolved),
        'resolutionEntries': ((value.resolutionEntries as Array<any>).map(ResolutionEntryDTOToJSON)),
    };
}

