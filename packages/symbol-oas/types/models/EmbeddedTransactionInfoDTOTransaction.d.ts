/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AccountRestrictionFlagsEnum } from './AccountRestrictionFlagsEnum';
import type { AliasActionEnum } from './AliasActionEnum';
import type { LinkActionEnum } from './LinkActionEnum';
import type { LockHashAlgorithmEnum } from './LockHashAlgorithmEnum';
import type { MosaicRestrictionTypeEnum } from './MosaicRestrictionTypeEnum';
import type { MosaicSupplyChangeActionEnum } from './MosaicSupplyChangeActionEnum';
import type { NamespaceRegistrationTypeEnum } from './NamespaceRegistrationTypeEnum';
import type { NetworkTypeEnum } from './NetworkTypeEnum';
import type { TransactionTypeEnum } from './TransactionTypeEnum';
import type { UnresolvedMosaic } from './UnresolvedMosaic';
/**
 *
 * @export
 * @interface EmbeddedTransactionInfoDTOTransaction
 */
export interface EmbeddedTransactionInfoDTOTransaction {
    /**
     * Public key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    signerPublicKey: string;
    /**
     * Entity version.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    version: number;
    /**
     *
     * @type {NetworkTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    network: NetworkTypeEnum;
    /**
     *
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    type: number;
    /**
     * 32 bytes voting public key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    linkedPublicKey: string;
    /**
     *
     * @type {LinkActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    linkAction: LinkActionEnum;
    /**
     * Finalization Epoch
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    startEpoch: number;
    /**
     * Finalization Epoch
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    endEpoch: number;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    mosaicId: string;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    amount: string;
    /**
     * Duration expressed in number of blocks.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    duration: string;
    /**
     *
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    hash: string;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    recipientAddress: string;
    /**
     *
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    secret: string;
    /**
     *
     * @type {LockHashAlgorithmEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    hashAlgorithm: LockHashAlgorithmEnum;
    /**
     * Original random set of bytes.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    proof: string;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetAddress: string;
    /**
     * Metadata key scoped to source, target and type expressed.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    scopedMetadataKey: string;
    /**
     * Change in value size in bytes.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    valueSizeDelta: number;
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    valueSize: number;
    /**
     * Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    value: string;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetMosaicId: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetNamespaceId?: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    id: string;
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    nonce: number;
    /**
     * - 0x00 (none) - No flags present.
     * - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
     * - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
     * - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
     * - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    flags: number;
    /**
     * Determines up to what decimal place the mosaic can be divided.
     * Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
     * The divisibility must be in the range of 0 and 6.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    divisibility: number;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    delta: string;
    /**
     *
     * @type {MosaicSupplyChangeActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    action: MosaicSupplyChangeActionEnum;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    sourceAddress: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    parentId?: string;
    /**
     *
     * @type {NamespaceRegistrationTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    registrationType: NamespaceRegistrationTypeEnum;
    /**
     * Namespace name.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    name: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    namespaceId: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    address: string;
    /**
     *
     * @type {AliasActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    aliasAction: AliasActionEnum;
    /**
     * Number of signatures needed to remove a cosignatory.
     * If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    minRemovalDelta: number;
    /**
     * Number of signatures needed to approve a transaction.
     * If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    minApprovalDelta: number;
    /**
     * Array of cosignatory accounts to add.
     * @type {Array<string>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    addressAdditions: Array<string>;
    /**
     * Array of cosignatory accounts to delete.
     * @type {Array<string>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    addressDeletions: Array<string>;
    /**
     *
     * @type {AccountRestrictionFlagsEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionFlags: AccountRestrictionFlagsEnum;
    /**
     * Account restriction additions.
     * @type {Array<TransactionTypeEnum>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionAdditions?: Array<TransactionTypeEnum>;
    /**
     * Account restriction deletions.
     * @type {Array<TransactionTypeEnum>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionDeletions?: Array<TransactionTypeEnum>;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    referenceMosaicId: string;
    /**
     * Restriction key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionKey: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    previousRestrictionValue: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    newRestrictionValue: string;
    /**
     *
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    previousRestrictionType: MosaicRestrictionTypeEnum;
    /**
     *
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    newRestrictionType: MosaicRestrictionTypeEnum;
    /**
     * Array of mosaics sent to the recipient.
     * @type {Array<UnresolvedMosaic>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    mosaics?: Array<UnresolvedMosaic>;
    /**
     * Transfer transaction message
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    message?: string;
}
/**
 * Check if a given object implements the EmbeddedTransactionInfoDTOTransaction interface.
 */
export declare function instanceOfEmbeddedTransactionInfoDTOTransaction(value: object): boolean;
export declare function EmbeddedTransactionInfoDTOTransactionFromJSON(json: any): EmbeddedTransactionInfoDTOTransaction;
export declare function EmbeddedTransactionInfoDTOTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddedTransactionInfoDTOTransaction;
export declare function EmbeddedTransactionInfoDTOTransactionToJSON(value?: EmbeddedTransactionInfoDTOTransaction | null): any;
