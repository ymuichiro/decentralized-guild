/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { MetadataEntryDTOTargetIdFromJSON, MetadataEntryDTOTargetIdToJSON, } from './MetadataEntryDTOTargetId';
import { MetadataTypeEnumFromJSON, MetadataTypeEnumToJSON } from './MetadataTypeEnum';
/**
 * Check if a given object implements the MetadataEntryDTO interface.
 */
export function instanceOfMetadataEntryDTO(value) {
    var isInstance = true;
    isInstance = isInstance && 'version' in value;
    isInstance = isInstance && 'compositeHash' in value;
    isInstance = isInstance && 'sourceAddress' in value;
    isInstance = isInstance && 'targetAddress' in value;
    isInstance = isInstance && 'scopedMetadataKey' in value;
    isInstance = isInstance && 'metadataType' in value;
    isInstance = isInstance && 'value' in value;
    return isInstance;
}
export function MetadataEntryDTOFromJSON(json) {
    return MetadataEntryDTOFromJSONTyped(json, false);
}
export function MetadataEntryDTOFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        version: json['version'],
        compositeHash: json['compositeHash'],
        sourceAddress: json['sourceAddress'],
        targetAddress: json['targetAddress'],
        scopedMetadataKey: json['scopedMetadataKey'],
        targetId: !exists(json, 'targetId') ? undefined : MetadataEntryDTOTargetIdFromJSON(json['targetId']),
        metadataType: MetadataTypeEnumFromJSON(json['metadataType']),
        value: json['value'],
    };
}
export function MetadataEntryDTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        version: value.version,
        compositeHash: value.compositeHash,
        sourceAddress: value.sourceAddress,
        targetAddress: value.targetAddress,
        scopedMetadataKey: value.scopedMetadataKey,
        targetId: MetadataEntryDTOTargetIdToJSON(value.targetId),
        metadataType: MetadataTypeEnumToJSON(value.metadataType),
        value: value.value,
    };
}
