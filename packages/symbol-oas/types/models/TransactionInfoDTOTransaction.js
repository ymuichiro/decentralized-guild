/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { AccountRestrictionFlagsEnumFromJSON, AccountRestrictionFlagsEnumToJSON, } from './AccountRestrictionFlagsEnum';
import { AliasActionEnumFromJSON, AliasActionEnumToJSON } from './AliasActionEnum';
import { CosignatureDTOFromJSON, CosignatureDTOToJSON } from './CosignatureDTO';
import { EmbeddedTransactionInfoDTOFromJSON, EmbeddedTransactionInfoDTOToJSON, } from './EmbeddedTransactionInfoDTO';
import { LinkActionEnumFromJSON, LinkActionEnumToJSON } from './LinkActionEnum';
import { LockHashAlgorithmEnumFromJSON, LockHashAlgorithmEnumToJSON, } from './LockHashAlgorithmEnum';
import { MosaicRestrictionTypeEnumFromJSON, MosaicRestrictionTypeEnumToJSON, } from './MosaicRestrictionTypeEnum';
import { MosaicSupplyChangeActionEnumFromJSON, MosaicSupplyChangeActionEnumToJSON, } from './MosaicSupplyChangeActionEnum';
import { NamespaceRegistrationTypeEnumFromJSON, NamespaceRegistrationTypeEnumToJSON, } from './NamespaceRegistrationTypeEnum';
import { NetworkTypeEnumFromJSON, NetworkTypeEnumToJSON } from './NetworkTypeEnum';
import { TransactionTypeEnumFromJSON, TransactionTypeEnumToJSON, } from './TransactionTypeEnum';
import { UnresolvedMosaicFromJSON, UnresolvedMosaicToJSON } from './UnresolvedMosaic';
/**
 * Check if a given object implements the TransactionInfoDTOTransaction interface.
 */
export function instanceOfTransactionInfoDTOTransaction(value) {
    var isInstance = true;
    isInstance = isInstance && 'size' in value;
    isInstance = isInstance && 'signature' in value;
    isInstance = isInstance && 'signerPublicKey' in value;
    isInstance = isInstance && 'version' in value;
    isInstance = isInstance && 'network' in value;
    isInstance = isInstance && 'type' in value;
    isInstance = isInstance && 'maxFee' in value;
    isInstance = isInstance && 'deadline' in value;
    isInstance = isInstance && 'linkedPublicKey' in value;
    isInstance = isInstance && 'linkAction' in value;
    isInstance = isInstance && 'startEpoch' in value;
    isInstance = isInstance && 'endEpoch' in value;
    isInstance = isInstance && 'transactionsHash' in value;
    isInstance = isInstance && 'cosignatures' in value;
    isInstance = isInstance && 'transactions' in value;
    isInstance = isInstance && 'mosaicId' in value;
    isInstance = isInstance && 'amount' in value;
    isInstance = isInstance && 'duration' in value;
    isInstance = isInstance && 'hash' in value;
    isInstance = isInstance && 'recipientAddress' in value;
    isInstance = isInstance && 'secret' in value;
    isInstance = isInstance && 'hashAlgorithm' in value;
    isInstance = isInstance && 'proof' in value;
    isInstance = isInstance && 'targetAddress' in value;
    isInstance = isInstance && 'scopedMetadataKey' in value;
    isInstance = isInstance && 'valueSizeDelta' in value;
    isInstance = isInstance && 'valueSize' in value;
    isInstance = isInstance && 'value' in value;
    isInstance = isInstance && 'targetMosaicId' in value;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'nonce' in value;
    isInstance = isInstance && 'flags' in value;
    isInstance = isInstance && 'divisibility' in value;
    isInstance = isInstance && 'delta' in value;
    isInstance = isInstance && 'action' in value;
    isInstance = isInstance && 'sourceAddress' in value;
    isInstance = isInstance && 'registrationType' in value;
    isInstance = isInstance && 'name' in value;
    isInstance = isInstance && 'namespaceId' in value;
    isInstance = isInstance && 'address' in value;
    isInstance = isInstance && 'aliasAction' in value;
    isInstance = isInstance && 'minRemovalDelta' in value;
    isInstance = isInstance && 'minApprovalDelta' in value;
    isInstance = isInstance && 'addressAdditions' in value;
    isInstance = isInstance && 'addressDeletions' in value;
    isInstance = isInstance && 'restrictionFlags' in value;
    isInstance = isInstance && 'referenceMosaicId' in value;
    isInstance = isInstance && 'restrictionKey' in value;
    isInstance = isInstance && 'previousRestrictionValue' in value;
    isInstance = isInstance && 'newRestrictionValue' in value;
    isInstance = isInstance && 'previousRestrictionType' in value;
    isInstance = isInstance && 'newRestrictionType' in value;
    return isInstance;
}
export function TransactionInfoDTOTransactionFromJSON(json) {
    return TransactionInfoDTOTransactionFromJSONTyped(json, false);
}
export function TransactionInfoDTOTransactionFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        size: json['size'],
        signature: json['signature'],
        signerPublicKey: json['signerPublicKey'],
        version: json['version'],
        network: NetworkTypeEnumFromJSON(json['network']),
        type: json['type'],
        maxFee: json['maxFee'],
        deadline: json['deadline'],
        linkedPublicKey: json['linkedPublicKey'],
        linkAction: LinkActionEnumFromJSON(json['linkAction']),
        startEpoch: json['startEpoch'],
        endEpoch: json['endEpoch'],
        transactionsHash: json['transactionsHash'],
        cosignatures: json['cosignatures'].map(CosignatureDTOFromJSON),
        transactions: json['transactions'].map(EmbeddedTransactionInfoDTOFromJSON),
        mosaicId: json['mosaicId'],
        amount: json['amount'],
        duration: json['duration'],
        hash: json['hash'],
        recipientAddress: json['recipientAddress'],
        secret: json['secret'],
        hashAlgorithm: LockHashAlgorithmEnumFromJSON(json['hashAlgorithm']),
        proof: json['proof'],
        targetAddress: json['targetAddress'],
        scopedMetadataKey: json['scopedMetadataKey'],
        valueSizeDelta: json['valueSizeDelta'],
        valueSize: json['valueSize'],
        value: json['value'],
        targetMosaicId: json['targetMosaicId'],
        targetNamespaceId: !exists(json, 'targetNamespaceId') ? undefined : json['targetNamespaceId'],
        id: json['id'],
        nonce: json['nonce'],
        flags: json['flags'],
        divisibility: json['divisibility'],
        delta: json['delta'],
        action: MosaicSupplyChangeActionEnumFromJSON(json['action']),
        sourceAddress: json['sourceAddress'],
        parentId: !exists(json, 'parentId') ? undefined : json['parentId'],
        registrationType: NamespaceRegistrationTypeEnumFromJSON(json['registrationType']),
        name: json['name'],
        namespaceId: json['namespaceId'],
        address: json['address'],
        aliasAction: AliasActionEnumFromJSON(json['aliasAction']),
        minRemovalDelta: json['minRemovalDelta'],
        minApprovalDelta: json['minApprovalDelta'],
        addressAdditions: json['addressAdditions'],
        addressDeletions: json['addressDeletions'],
        restrictionFlags: AccountRestrictionFlagsEnumFromJSON(json['restrictionFlags']),
        restrictionAdditions: !exists(json, 'restrictionAdditions')
            ? undefined
            : json['restrictionAdditions'].map(TransactionTypeEnumFromJSON),
        restrictionDeletions: !exists(json, 'restrictionDeletions')
            ? undefined
            : json['restrictionDeletions'].map(TransactionTypeEnumFromJSON),
        referenceMosaicId: json['referenceMosaicId'],
        restrictionKey: json['restrictionKey'],
        previousRestrictionValue: json['previousRestrictionValue'],
        newRestrictionValue: json['newRestrictionValue'],
        previousRestrictionType: MosaicRestrictionTypeEnumFromJSON(json['previousRestrictionType']),
        newRestrictionType: MosaicRestrictionTypeEnumFromJSON(json['newRestrictionType']),
        mosaics: !exists(json, 'mosaics') ? undefined : json['mosaics'].map(UnresolvedMosaicFromJSON),
        message: !exists(json, 'message') ? undefined : json['message'],
    };
}
export function TransactionInfoDTOTransactionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        size: value.size,
        signature: value.signature,
        signerPublicKey: value.signerPublicKey,
        version: value.version,
        network: NetworkTypeEnumToJSON(value.network),
        type: value.type,
        maxFee: value.maxFee,
        deadline: value.deadline,
        linkedPublicKey: value.linkedPublicKey,
        linkAction: LinkActionEnumToJSON(value.linkAction),
        startEpoch: value.startEpoch,
        endEpoch: value.endEpoch,
        transactionsHash: value.transactionsHash,
        cosignatures: value.cosignatures.map(CosignatureDTOToJSON),
        transactions: value.transactions.map(EmbeddedTransactionInfoDTOToJSON),
        mosaicId: value.mosaicId,
        amount: value.amount,
        duration: value.duration,
        hash: value.hash,
        recipientAddress: value.recipientAddress,
        secret: value.secret,
        hashAlgorithm: LockHashAlgorithmEnumToJSON(value.hashAlgorithm),
        proof: value.proof,
        targetAddress: value.targetAddress,
        scopedMetadataKey: value.scopedMetadataKey,
        valueSizeDelta: value.valueSizeDelta,
        valueSize: value.valueSize,
        value: value.value,
        targetMosaicId: value.targetMosaicId,
        targetNamespaceId: value.targetNamespaceId,
        id: value.id,
        nonce: value.nonce,
        flags: value.flags,
        divisibility: value.divisibility,
        delta: value.delta,
        action: MosaicSupplyChangeActionEnumToJSON(value.action),
        sourceAddress: value.sourceAddress,
        parentId: value.parentId,
        registrationType: NamespaceRegistrationTypeEnumToJSON(value.registrationType),
        name: value.name,
        namespaceId: value.namespaceId,
        address: value.address,
        aliasAction: AliasActionEnumToJSON(value.aliasAction),
        minRemovalDelta: value.minRemovalDelta,
        minApprovalDelta: value.minApprovalDelta,
        addressAdditions: value.addressAdditions,
        addressDeletions: value.addressDeletions,
        restrictionFlags: AccountRestrictionFlagsEnumToJSON(value.restrictionFlags),
        restrictionAdditions: value.restrictionAdditions === undefined
            ? undefined
            : value.restrictionAdditions.map(TransactionTypeEnumToJSON),
        restrictionDeletions: value.restrictionDeletions === undefined
            ? undefined
            : value.restrictionDeletions.map(TransactionTypeEnumToJSON),
        referenceMosaicId: value.referenceMosaicId,
        restrictionKey: value.restrictionKey,
        previousRestrictionValue: value.previousRestrictionValue,
        newRestrictionValue: value.newRestrictionValue,
        previousRestrictionType: MosaicRestrictionTypeEnumToJSON(value.previousRestrictionType),
        newRestrictionType: MosaicRestrictionTypeEnumToJSON(value.newRestrictionType),
        mosaics: value.mosaics === undefined ? undefined : value.mosaics.map(UnresolvedMosaicToJSON),
        message: value.message,
    };
}
