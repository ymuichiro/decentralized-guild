/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as runtime from '../runtime';
import { AnnounceTransactionInfoDTOFromJSON, CosignatureToJSON, TransactionIdsToJSON, TransactionInfoDTOFromJSON, TransactionPageFromJSON, TransactionPayloadToJSON, } from '../models';
/**
 *
 */
var TransactionRoutesApi = /** @class */ (function (_super) {
    __extends(TransactionRoutesApi, _super);
    function TransactionRoutesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Announces a cosignature transaction to the network.
     * Announce a cosignature transaction
     */
    TransactionRoutesApi.prototype.announceCosignatureTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.cosignature === null || requestParameters.cosignature === undefined) {
                            throw new runtime.RequiredError('cosignature', 'Required parameter requestParameters.cosignature was null or undefined when calling announceCosignatureTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions/cosignature",
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: CosignatureToJSON(requestParameters.cosignature),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AnnounceTransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Announces a cosignature transaction to the network.
     * Announce a cosignature transaction
     */
    TransactionRoutesApi.prototype.announceCosignatureTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.announceCosignatureTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Announces an aggregate bonded transaction to the network.
     * Announce an aggregate bonded transaction
     */
    TransactionRoutesApi.prototype.announcePartialTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionPayload === null || requestParameters.transactionPayload === undefined) {
                            throw new runtime.RequiredError('transactionPayload', 'Required parameter requestParameters.transactionPayload was null or undefined when calling announcePartialTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions/partial",
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: TransactionPayloadToJSON(requestParameters.transactionPayload),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AnnounceTransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Announces an aggregate bonded transaction to the network.
     * Announce an aggregate bonded transaction
     */
    TransactionRoutesApi.prototype.announcePartialTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.announcePartialTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It\'s recommended to use SDKs instead of calling the API endpoint directly to announce transactions.
     * Announce a new transaction
     */
    TransactionRoutesApi.prototype.announceTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionPayload === null || requestParameters.transactionPayload === undefined) {
                            throw new runtime.RequiredError('transactionPayload', 'Required parameter requestParameters.transactionPayload was null or undefined when calling announceTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions",
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: TransactionPayloadToJSON(requestParameters.transactionPayload),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AnnounceTransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It\'s recommended to use SDKs instead of calling the API endpoint directly to announce transactions.
     * Announce a new transaction
     */
    TransactionRoutesApi.prototype.announceTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.announceTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns confirmed transaction information given a transactionId or hash.
     * Get confirmed transaction information
     */
    TransactionRoutesApi.prototype.getConfirmedTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                            throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getConfirmedTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/confirmed/{transactionId}".replace("{".concat('transactionId', "}"), encodeURIComponent(String(requestParameters.transactionId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns confirmed transaction information given a transactionId or hash.
     * Get confirmed transaction information
     */
    TransactionRoutesApi.prototype.getConfirmedTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConfirmedTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns confirmed transactions information for a given array of transactionIds.
     * Get confirmed trasactions information
     */
    TransactionRoutesApi.prototype.getConfirmedTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionIds === null || requestParameters.transactionIds === undefined) {
                            throw new runtime.RequiredError('transactionIds', 'Required parameter requestParameters.transactionIds was null or undefined when calling getConfirmedTransactions.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions/confirmed",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: TransactionIdsToJSON(requestParameters.transactionIds),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TransactionInfoDTOFromJSON); })];
                }
            });
        });
    };
    /**
     * Returns confirmed transactions information for a given array of transactionIds.
     * Get confirmed trasactions information
     */
    TransactionRoutesApi.prototype.getConfirmedTransactions = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConfirmedTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns partial transaction information given a transactionId or hash.
     * Get partial transaction information
     */
    TransactionRoutesApi.prototype.getPartialTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                            throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getPartialTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/partial/{transactionId}".replace("{".concat('transactionId', "}"), encodeURIComponent(String(requestParameters.transactionId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns partial transaction information given a transactionId or hash.
     * Get partial transaction information
     */
    TransactionRoutesApi.prototype.getPartialTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPartialTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns partial transactions information for a given array of transactionIds.
     * Get partial trasactions information
     */
    TransactionRoutesApi.prototype.getPartialTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionIds === null || requestParameters.transactionIds === undefined) {
                            throw new runtime.RequiredError('transactionIds', 'Required parameter requestParameters.transactionIds was null or undefined when calling getPartialTransactions.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions/partial",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: TransactionIdsToJSON(requestParameters.transactionIds),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TransactionInfoDTOFromJSON); })];
                }
            });
        });
    };
    /**
     * Returns partial transactions information for a given array of transactionIds.
     * Get partial trasactions information
     */
    TransactionRoutesApi.prototype.getPartialTransactions = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPartialTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns unconfirmed transaction information given a transactionId or hash.
     * Get unconfirmed transaction information
     */
    TransactionRoutesApi.prototype.getUnconfirmedTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                            throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getUnconfirmedTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/unconfirmed/{transactionId}".replace("{".concat('transactionId', "}"), encodeURIComponent(String(requestParameters.transactionId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionInfoDTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns unconfirmed transaction information given a transactionId or hash.
     * Get unconfirmed transaction information
     */
    TransactionRoutesApi.prototype.getUnconfirmedTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUnconfirmedTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns unconfirmed transactions information for a given array of transactionIds.
     * Get unconfirmed trasactions information
     */
    TransactionRoutesApi.prototype.getUnconfirmedTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.transactionIds === null || requestParameters.transactionIds === undefined) {
                            throw new runtime.RequiredError('transactionIds', 'Required parameter requestParameters.transactionIds was null or undefined when calling getUnconfirmedTransactions.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/transactions/unconfirmed",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: TransactionIdsToJSON(requestParameters.transactionIds),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TransactionInfoDTOFromJSON); })];
                }
            });
        });
    };
    /**
     * Returns unconfirmed transactions information for a given array of transactionIds.
     * Get unconfirmed trasactions information
     */
    TransactionRoutesApi.prototype.getUnconfirmedTransactions = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUnconfirmedTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time.
     * Search confirmed transactions
     */
    TransactionRoutesApi.prototype.searchConfirmedTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.address !== undefined) {
                            queryParameters['address'] = requestParameters.address;
                        }
                        if (requestParameters.recipientAddress !== undefined) {
                            queryParameters['recipientAddress'] = requestParameters.recipientAddress;
                        }
                        if (requestParameters.signerPublicKey !== undefined) {
                            queryParameters['signerPublicKey'] = requestParameters.signerPublicKey;
                        }
                        if (requestParameters.height !== undefined) {
                            queryParameters['height'] = requestParameters.height;
                        }
                        if (requestParameters.fromHeight !== undefined) {
                            queryParameters['fromHeight'] = requestParameters.fromHeight;
                        }
                        if (requestParameters.toHeight !== undefined) {
                            queryParameters['toHeight'] = requestParameters.toHeight;
                        }
                        if (requestParameters.fromTransferAmount !== undefined) {
                            queryParameters['fromTransferAmount'] = requestParameters.fromTransferAmount;
                        }
                        if (requestParameters.toTransferAmount !== undefined) {
                            queryParameters['toTransferAmount'] = requestParameters.toTransferAmount;
                        }
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.embedded !== undefined) {
                            queryParameters['embedded'] = requestParameters.embedded;
                        }
                        if (requestParameters.transferMosaicId !== undefined) {
                            queryParameters['transferMosaicId'] = requestParameters.transferMosaicId;
                        }
                        if (requestParameters.pageSize !== undefined) {
                            queryParameters['pageSize'] = requestParameters.pageSize;
                        }
                        if (requestParameters.pageNumber !== undefined) {
                            queryParameters['pageNumber'] = requestParameters.pageNumber;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/confirmed",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionPageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time.
     * Search confirmed transactions
     */
    TransactionRoutesApi.prototype.searchConfirmedTransactions = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchConfirmedTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns an array of partial transactions.
     * Search partial transactions
     */
    TransactionRoutesApi.prototype.searchPartialTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.address !== undefined) {
                            queryParameters['address'] = requestParameters.address;
                        }
                        if (requestParameters.recipientAddress !== undefined) {
                            queryParameters['recipientAddress'] = requestParameters.recipientAddress;
                        }
                        if (requestParameters.signerPublicKey !== undefined) {
                            queryParameters['signerPublicKey'] = requestParameters.signerPublicKey;
                        }
                        if (requestParameters.height !== undefined) {
                            queryParameters['height'] = requestParameters.height;
                        }
                        if (requestParameters.fromHeight !== undefined) {
                            queryParameters['fromHeight'] = requestParameters.fromHeight;
                        }
                        if (requestParameters.toHeight !== undefined) {
                            queryParameters['toHeight'] = requestParameters.toHeight;
                        }
                        if (requestParameters.fromTransferAmount !== undefined) {
                            queryParameters['fromTransferAmount'] = requestParameters.fromTransferAmount;
                        }
                        if (requestParameters.toTransferAmount !== undefined) {
                            queryParameters['toTransferAmount'] = requestParameters.toTransferAmount;
                        }
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.embedded !== undefined) {
                            queryParameters['embedded'] = requestParameters.embedded;
                        }
                        if (requestParameters.transferMosaicId !== undefined) {
                            queryParameters['transferMosaicId'] = requestParameters.transferMosaicId;
                        }
                        if (requestParameters.pageSize !== undefined) {
                            queryParameters['pageSize'] = requestParameters.pageSize;
                        }
                        if (requestParameters.pageNumber !== undefined) {
                            queryParameters['pageNumber'] = requestParameters.pageNumber;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/partial",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionPageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns an array of partial transactions.
     * Search partial transactions
     */
    TransactionRoutesApi.prototype.searchPartialTransactions = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchPartialTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns an array of unconfirmed transactions.
     * Search unconfirmed transactions
     */
    TransactionRoutesApi.prototype.searchUnconfirmedTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.address !== undefined) {
                            queryParameters['address'] = requestParameters.address;
                        }
                        if (requestParameters.recipientAddress !== undefined) {
                            queryParameters['recipientAddress'] = requestParameters.recipientAddress;
                        }
                        if (requestParameters.signerPublicKey !== undefined) {
                            queryParameters['signerPublicKey'] = requestParameters.signerPublicKey;
                        }
                        if (requestParameters.height !== undefined) {
                            queryParameters['height'] = requestParameters.height;
                        }
                        if (requestParameters.fromHeight !== undefined) {
                            queryParameters['fromHeight'] = requestParameters.fromHeight;
                        }
                        if (requestParameters.toHeight !== undefined) {
                            queryParameters['toHeight'] = requestParameters.toHeight;
                        }
                        if (requestParameters.fromTransferAmount !== undefined) {
                            queryParameters['fromTransferAmount'] = requestParameters.fromTransferAmount;
                        }
                        if (requestParameters.toTransferAmount !== undefined) {
                            queryParameters['toTransferAmount'] = requestParameters.toTransferAmount;
                        }
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.embedded !== undefined) {
                            queryParameters['embedded'] = requestParameters.embedded;
                        }
                        if (requestParameters.transferMosaicId !== undefined) {
                            queryParameters['transferMosaicId'] = requestParameters.transferMosaicId;
                        }
                        if (requestParameters.pageSize !== undefined) {
                            queryParameters['pageSize'] = requestParameters.pageSize;
                        }
                        if (requestParameters.pageNumber !== undefined) {
                            queryParameters['pageNumber'] = requestParameters.pageNumber;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/transactions/unconfirmed",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TransactionPageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns an array of unconfirmed transactions.
     * Search unconfirmed transactions
     */
    TransactionRoutesApi.prototype.searchUnconfirmedTransactions = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchUnconfirmedTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return TransactionRoutesApi;
}(runtime.BaseAPI));
export { TransactionRoutesApi };
