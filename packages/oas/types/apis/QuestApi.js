/* tslint:disable */
/* eslint-disable */
/**
 * Decentralized-Guild
 * About Decentralized Guild System APIs. Please use it when expanding the system.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ym.u.ichiro@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as runtime from '../runtime';
import { ChatRoomFromJSON, GetQuestWorkersResponseFromJSON, GetQuestsResponseInnerFromJSON, PostQuestApprovalResponseFromJSON, PostQuestWorkerRequestBodyToJSON, PutQuestApprovalRequestToJSON, QuestFromJSON, QuestUpdateRequestToJSON, QuestWorkerFromJSON, } from '../models';
/**
 *
 */
var QuestApi = /** @class */ (function (_super) {
    __extends(QuestApi, _super);
    function QuestApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 成立済みの場合、削除の受付は行わない
     * delete quest
     */
    QuestApi.prototype.deleteQuestRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling deleteQuest.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}".replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * 成立済みの場合、削除の受付は行わない
     * delete quest
     */
    QuestApi.prototype.deleteQuest = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteQuestRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Obtaining quest information
     * get quest
     */
    QuestApi.prototype.getQuestRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling getQuest.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}".replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return QuestFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Obtaining quest information
     * get quest
     */
    QuestApi.prototype.getQuest = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getQuestRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * クエストに紐づくワーカーの情報を取得する
     * get quest worker
     */
    QuestApi.prototype.getQuestWorkerRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling getQuestWorker.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling getQuestWorker.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return QuestWorkerFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * クエストに紐づくワーカーの情報を取得する
     * get quest worker
     */
    QuestApi.prototype.getQuestWorker = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getQuestWorkerRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * クエストに紐づくワーカーの一覧を取得する
     * get quest workers
     */
    QuestApi.prototype.getQuestWorkersRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling getQuestWorkers.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers".replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return GetQuestWorkersResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * クエストに紐づくワーカーの一覧を取得する
     * get quest workers
     */
    QuestApi.prototype.getQuestWorkers = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getQuestWorkersRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieving the Quest List
     * get quests
     */
    QuestApi.prototype.getQuestsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.requesterPublicKey !== undefined) {
                            queryParameters['requesterPublicKey'] = requestParameters.requesterPublicKey;
                        }
                        if (requestParameters.workerPublicKey !== undefined) {
                            queryParameters['workerPublicKey'] = requestParameters.workerPublicKey;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.keyword !== undefined) {
                            queryParameters['keyword'] = requestParameters.keyword;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return GetQuestsResponseInnerFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieving the Quest List
     * get quests
     */
    QuestApi.prototype.getQuests = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getQuestsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Register quest
     * post quest
     */
    QuestApi.prototype.postQuestRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questUpdateRequest === null || requestParameters.questUpdateRequest === undefined) {
                            throw new runtime.RequiredError('questUpdateRequest', 'Required parameter requestParameters.questUpdateRequest was null or undefined when calling postQuest.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/quests",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: QuestUpdateRequestToJSON(requestParameters.questUpdateRequest),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return QuestFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Register quest
     * post quest
     */
    QuestApi.prototype.postQuest = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postQuestRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * クエスト作成者による提案の承認
     * approval quest proposal
     */
    QuestApi.prototype.postQuestApprovalRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling postQuestApproval.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling postQuestApproval.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}/approval"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostQuestApprovalResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * クエスト作成者による提案の承認
     * approval quest proposal
     */
    QuestApi.prototype.postQuestApproval = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postQuestApprovalRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * クエストにワーカーを追加する
     * post quest worker
     */
    QuestApi.prototype.postQuestWorkerRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling postQuestWorker.');
                        }
                        if (requestParameters.postQuestWorkerRequestBody === null ||
                            requestParameters.postQuestWorkerRequestBody === undefined) {
                            throw new runtime.RequiredError('postQuestWorkerRequestBody', 'Required parameter requestParameters.postQuestWorkerRequestBody was null or undefined when calling postQuestWorker.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers".replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: PostQuestWorkerRequestBodyToJSON(requestParameters.postQuestWorkerRequestBody),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return ChatRoomFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * クエストにワーカーを追加する
     * post quest worker
     */
    QuestApi.prototype.postQuestWorker = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postQuestWorkerRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * タスク完了時の検収リクエスト
     * post quest worker completion
     */
    QuestApi.prototype.postQuestWorkerCompletionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling postQuestWorkerCompletion.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling postQuestWorkerCompletion.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}/completion"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * タスク完了時の検収リクエスト
     * post quest worker completion
     */
    QuestApi.prototype.postQuestWorkerCompletion = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postQuestWorkerCompletionRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * タスクの完了時に報酬を支払う
     * post quest worker reward
     */
    QuestApi.prototype.postQuestWorkerRewardRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling postQuestWorkerReward.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling postQuestWorkerReward.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}/reward"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * タスクの完了時に報酬を支払う
     * post quest worker reward
     */
    QuestApi.prototype.postQuestWorkerReward = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postQuestWorkerRewardRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * update quest information
     * put quest
     */
    QuestApi.prototype.putQuestRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling putQuest.');
                        }
                        if (requestParameters.questUpdateRequest === null || requestParameters.questUpdateRequest === undefined) {
                            throw new runtime.RequiredError('questUpdateRequest', 'Required parameter requestParameters.questUpdateRequest was null or undefined when calling putQuest.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}".replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: QuestUpdateRequestToJSON(requestParameters.questUpdateRequest),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * update quest information
     * put quest
     */
    QuestApi.prototype.putQuest = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.putQuestRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 提案の承認時に生成されたトランザクションを署名、アナウンスしたことを伝えるAPI
     * set transaction status
     */
    QuestApi.prototype.putQuestApprovalRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling putQuestApproval.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling putQuestApproval.');
                        }
                        if (requestParameters.putQuestApprovalRequest === null || requestParameters.putQuestApprovalRequest === undefined) {
                            throw new runtime.RequiredError('putQuestApprovalRequest', 'Required parameter requestParameters.putQuestApprovalRequest was null or undefined when calling putQuestApproval.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}/approval"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: PutQuestApprovalRequestToJSON(requestParameters.putQuestApprovalRequest),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * 提案の承認時に生成されたトランザクションを署名、アナウンスしたことを伝えるAPI
     * set transaction status
     */
    QuestApi.prototype.putQuestApproval = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.putQuestApprovalRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ワーカーによるキャンセル（ステータスが申し込み中の時のみ実行可能）
     * put quest worker
     */
    QuestApi.prototype.putQuestWorkerRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.questId === null || requestParameters.questId === undefined) {
                            throw new runtime.RequiredError('questId', 'Required parameter requestParameters.questId was null or undefined when calling putQuestWorker.');
                        }
                        if (requestParameters.workerId === null || requestParameters.workerId === undefined) {
                            throw new runtime.RequiredError('workerId', 'Required parameter requestParameters.workerId was null or undefined when calling putQuestWorker.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/quests/{questId}/workers/{workerId}"
                                    .replace("{".concat('questId', "}"), encodeURIComponent(String(requestParameters.questId)))
                                    .replace("{".concat('workerId', "}"), encodeURIComponent(String(requestParameters.workerId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * ワーカーによるキャンセル（ステータスが申し込み中の時のみ実行可能）
     * put quest worker
     */
    QuestApi.prototype.putQuestWorker = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.putQuestWorkerRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return QuestApi;
}(runtime.BaseAPI));
export { QuestApi };
